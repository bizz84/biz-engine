/*****************************************************************************
 * Filename			FontManager.cpp
 * 
 * License			GPLv3
 *
 * Author			Andrea Bizzotto (bizz84@gmail.com)
 *
 * Platform			LinuxX11 / OpenGL
 * 
 * Description		Font Manager
 *
 *****************************************************************************/

#include "FontGothic.h"
#include "../GLResourceManager.h"


static const int MAX_GLYPHS = 96;
const int glyphs[MAX_GLYPHS][4] = {

	{ 135,  69, 145,  92 },		// 32 space
	{   0,   0,   0,   0 },		// 33 !
	{   0,   0,   0,   0 },		// 34 "
	{   0,   0,   0,   0 },		// 35 #
	{   0,   0,   0,   0 },		// 36 $
	{   0,   0,   0,   0 },		// 37 %
	{   0,   0,   0,   0 },		// 38 &
	{   0,   0,   0,   0 },		// 39 '
	{ 199, 105, 209, 133 },		// 40 (
	{ 213, 105, 223, 133 },		// 41 )
	{ 226, 198, 240, 226 },		// 42 *
	{ 195, 198, 209, 226 },		// 43 +
	{ 144, 198, 150, 226 },		// 44 ,
	{ 212, 198, 222, 226 },		// 45 -
	{ 133, 198, 139, 226 },		// 46 .
	{   0,   0,   0,   0 },		// 47 /

	{   4, 105,  18, 133 },		// 48 0
	{  22, 105,  30, 133 },		// 49 1
	{  34, 105,  50, 133 },		// 50 2
	{  52, 105,  66, 133 },		// 51 3
	{  68, 105,  84, 133 },		// 52 4
	{  88, 105, 101, 133 },		// 53 5
	{ 106, 105, 119, 133 },		// 54 6
	{ 123, 105, 138, 133 },		// 55 7
	{ 141, 105, 155, 133 },		// 56 8
	{ 159, 105, 173, 133 },		// 57 9

	{ 244, 198, 251, 226 },		// 58 :
	{   0,   0,   0,   0 },		// 59 ;
	{   0,   0,   0,   0 },		// 60 <
	{ 180, 105, 195, 133 },		// 61 =
	{   0,   0,   0,   0 },		// 62 >
	{   0,   0,   0,   0 },		// 63 ?
	{   0,   0,   0,   0 },		// 64 @

	{   5,   5,  26,  34 },		// 65 A
	{  31,   5,  47,  34 },		// 66 B
	{  53,   5,  72,  34 },		// 67 C
	{  77,   5,  97,  34 },		// 68 D
	{ 103,   5, 119,  34 },		// 69 E
	{ 121,   5, 138,  34 },		// 70 F
	{ 143,   5, 162,  34 },		// 71 G
	{ 167,   5, 188,  34 },		// 72 H
	{ 193,   5, 203,  34 },		// 73 I
	{ 205,   5, 217,  34 },		// 74 J
	{ 218,   5, 237,  34 },		// 75 K
	{   6,  37,  23,  66 },		// 76 L
	{  28,  37,  54,  66 },		// 77 M
	{  58,  37,  79,  66 },		// 78 N
	{  83,  36, 106,  66 },		// 79 O
	{ 109,  37, 126,  66 },		// 80 P
	{ 132,  37, 155,  66 },		// 81 Q
	{ 158,  36, 180,  66 },		// 82 R
	{ 181,  37, 195,  66 },		// 83 S
	{ 200,  37, 217,  66 },		// 84 T
	{ 221,  37, 243,  66 },		// 85 U
	{   6,  68,  29,  96 },		// 86 V
	{  34,  69,  63,  96 },		// 87 W
	{  70,  69,  91,  96 },		// 88 X
	{  91,  69, 111,  96 },		// 89 Y
	{ 113,  69, 136,  96 },		// 90 Z

	{   0,   0,   0,   0 },		// 91 [
	{   0,   0,   0,   0 },		// 92 barra
	{   0,   0,   0,   0 },		// 93 ]
	{   0,   0,   0,   0 },		// 94 ^
	{ 179, 198, 193, 226 },		// 95 _
	{   0,   0,   0,   0 },		// 96 apice

	{   5, 134,  17, 164 },		// 97 a
	{  29, 134,  45, 163 },		// 98 b
	{  51, 134,  64, 162 },		// 99 c
	{  76, 134,  90, 163 },		// 00 d
	{ 101, 134, 114, 162 },		// 01 e
	{ 121, 134, 132, 163 },		// 02 f
	{ 141, 134, 155, 163 },		// 03 g
	{ 166, 134, 181, 163 },		// 04 h
	{ 192, 134, 199, 163 },		// 05 i
	{ 203, 134, 210, 163 },		// 06 j
	{ 219, 134, 235, 163 },		// 07 k
	{   5, 166,  12, 194 },		// 08 l
	{  26, 166,  48, 194 },		// 09 m
	{  57, 166,  72, 194 },		// 10 n
	{  82, 166,  96, 194 },		// 11 o
	{ 109, 166, 124, 194 },		// 12 p
	{ 131, 166, 146, 194 },		// 13 q
	{ 158, 166, 171, 194 },		// 14 r
	{ 181, 166, 192, 194 },		// 15 s
	{ 199, 166, 210, 194 },		// 16 t
	{ 220, 166, 234, 194 },		// 17 u
	{   5, 198,  19, 226 },		// 18 v
	{  33, 198,  53, 226 },		// 19 w
	{  69, 198,  87, 226 },		// 20 x
	{  94, 198, 108, 226 },		// 21 y
	{ 113, 198, 127, 226 },		// 22 z

	{   0,   0,   0,   0 },		// 23 {
	{   0,   0,   0,   0 },		// 24 |
	{   0,   0,   0,   0 },		// 25 }
	{   0,   0,   0,   0 },		// 26 ~
	{   0,   0,   0,   0 }		// 27
};


void FontGothic::GenerateGlyphs()
{
	unsigned int i;
	for (i = 0; i < MAX_GLYPHS; i++)
	{
		glyph[32 + i] = Glyph(glyphs[i][0], glyphs[i][1], glyphs[i][2], glyphs[i][3], 256, 228);
	}
}

const char *FontGothic::FragmentShader() const
{
	return
		"uniform sampler2D sTexture;" \
		"uniform vec4 Color;" \
		"varying vec2 TexCoord;" \
		"void main()" \
		"{" \
			"gl_FragColor = texture2D(sTexture, TexCoord);" \
			"gl_FragColor.a = 4.0 * gl_FragColor.a * Color.a;" \
			"gl_FragColor.xyz *= Color.xyz;" \
		"}";
}
